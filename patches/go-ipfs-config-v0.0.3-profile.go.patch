--- go-ipfs-config@v0.0.3/profile.go	2019-08-02 16:16:29.000000000 -0700
+++ /tmp/go-ipfs-config/profile.go	2019-08-02 16:21:47.000000000 -0700
@@ -3,6 +3,8 @@
 import (
 	"fmt"
 	"net"
+	"net/http"
+	"io/ioutil"
 	"time"
 )
 
@@ -44,6 +46,26 @@
 	"/ip6/fe80::/ipcidr/10",
 }
 
+func ExternalIP() (string, error) {
+        resp, err := http.Get("http://checkip.amazonaws.com")
+        if err != nil {
+                fmt.Println("get external IP failed")
+                return "", err
+        }
+        defer resp.Body.Close()
+        body, err := ioutil.ReadAll(resp.Body)
+        if err != nil {
+                fmt.Println("parse external IP failed")
+                return "", err
+        }
+        ip := string(body)
+        // remove last return
+        ip = ip[:len(ip)-1]
+        address := "/ip4/" + ip
+        address += "/tcp/4001"
+        return address, nil
+}
+
 // Profiles is a map holding configuration transformers. Docs are in docs/config.md
 var Profiles = map[string]Profile{
 	"server": {
@@ -107,6 +129,17 @@
 			return nil
 		},
 	},
+	"announce-public": {
+		Description: `Announce public IP when running on cloud VM or local network.`,
+		Transform: func(c *Config) error {
+			address, err := ExternalIP()
+			if err != nil {
+				return err
+			}
+			c.Addresses.Announce = appendSingle(c.Addresses.Announce, []string{address})
+			return nil
+		},
+	},
 	"badgerds": {
 		Description: `Replaces default datastore configuration with experimental
 badger datastore.

--- /Users/tron/work/go/pkg/mod/github.com/ipfs/go-ipfs-config@v0.0.3/init.go	2019-06-28 15:47:15.000000000 +0800
+++ init.go	2019-06-28 15:43:50.000000000 +0800
@@ -11,8 +11,8 @@
 	peer "github.com/libp2p/go-libp2p-peer"
 )
 
-func Init(out io.Writer, nBitsForKeypair int) (*Config, error) {
-	identity, err := identityConfig(out, nBitsForKeypair)
+func Init(out io.Writer, nBitsForKeypair int, keyType string) (*Config, error) {
+	identity, err := identityConfig(out, nBitsForKeypair, keyType)
 	if err != nil {
 		return nil, err
 	}
@@ -49,8 +49,8 @@
 
 		// setup the node mount points.
 		Mounts: Mounts{
-			IPFS: "/ipfs",
-			IPNS: "/ipns",
+			IPFS: "/btfs",
+			IPNS: "/btns",
 		},
 
 		Ipns: Ipns{
@@ -149,15 +149,30 @@
 }
 
 // identityConfig initializes a new identity.
-func identityConfig(out io.Writer, nbits int) (Identity, error) {
+func identityConfig(out io.Writer, nbits int, keyType string) (Identity, error) {
 	// TODO guard higher up
 	ident := Identity{}
 	if nbits < 1024 {
 		return ident, errors.New("bitsize less than 1024 is considered unsafe")
 	}
 
-	fmt.Fprintf(out, "generating %v-bit RSA keypair...", nbits)
-	sk, pk, err := ci.GenerateKeyPair(ci.RSA, nbits)
+	var key int
+
+	switch keyType {
+	case "RSA":
+		key = ci.RSA
+	case "Ed25519":
+		key = ci.Ed25519
+	case "Secp256k1":
+		key = ci.Secp256k1
+	case "ECDSA":
+		key = ci.ECDSA
+	default:
+		key = ci.ECDSA
+	}
+
+	fmt.Fprintf(out, "generating %v-bit %s keypair...", nbits, keyType)
+	sk, pk, err := ci.GenerateKeyPair(key, nbits)
 	if err != nil {
 		return ident, err
 	}

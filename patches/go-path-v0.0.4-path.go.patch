--- go-path@v0.0.4/path.go	2019-06-10 11:17:01.000000000 -0700
+++ /tmp/go-path/path.go	2019-06-10 14:17:29.000000000 -0700
@@ -27,7 +27,7 @@
 
 // FromCid safely converts a cid.Cid type to a Path type.
 func FromCid(c cid.Cid) Path {
-	return Path("/ipfs/" + c.String())
+	return Path("/btfs/" + c.String())
 }
 
 // Segments returns the different elements of a path
@@ -53,7 +53,7 @@
 // /ipld/<key>
 func (p Path) IsJustAKey() bool {
 	parts := p.Segments()
-	return len(parts) == 2 && (parts[0] == "ipfs" || parts[0] == "ipld")
+	return len(parts) == 2 && (parts[0] == "btfs" || parts[0] == "ipld")
 }
 
 // PopLastSegment returns a new Path without its final segment, and the final
@@ -100,7 +100,7 @@
 			return "", &pathError{error: err, path: txt}
 		}
 		// The case when the path starts with hash without a protocol prefix
-		return Path("/ipfs/" + txt), nil
+		return Path("/btfs/" + txt), nil
 	}
 
 	if len(parts) < 3 {
@@ -109,7 +109,7 @@
 
 	//TODO: make this smarter
 	switch parts[1] {
-	case "ipfs", "ipld":
+	case "btfs", "ipld":
 		if parts[2] == "" {
 			return "", &pathError{error: fmt.Errorf("not enough path components"), path: txt}
 		}
@@ -118,7 +118,7 @@
 		if err != nil {
 			return "", &pathError{error: fmt.Errorf("invalid CID: %s", err), path: txt}
 		}
-	case "ipns":
+	case "btns":
 		if parts[2] == "" {
 			return "", &pathError{error: fmt.Errorf("not enough path components"), path: txt}
 		}
@@ -163,7 +163,7 @@
 // must be a Multihash) and return it separately.
 func SplitAbsPath(fpath Path) (cid.Cid, []string, error) {
 	parts := fpath.Segments()
-	if parts[0] == "ipfs" || parts[0] == "ipld" {
+	if parts[0] == "btfs" || parts[0] == "ipld" {
 		parts = parts[1:]
 	}
 
